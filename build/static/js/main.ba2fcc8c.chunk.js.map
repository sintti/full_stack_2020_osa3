{"version":3,"sources":["services/services.js","components/PersonForm.js","components/Filter.js","components/Person.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","PersonForm","props","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","onClick","addPerson","Filter","newFilter","handleFilterChange","Person","person","name","number","handlePersonDelete","Persons","personsToShow","map","key","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","showAll","errorMessage","setErrorMessage","useEffect","services","initialData","setTimeout","catch","filter","toLowerCase","includes","event","target","preventDefault","personObject","length","containsObject","obj","list","some","elem","returnedPerson","concat","window","confirm","change","find","p","resData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba2fcc8c.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, deletePerson, update}","import React from 'react'\n\n// Print form to submit information\nconst PersonForm = (props) => {\n    return (\n        <form>\n            name: <input value={props.newName} onChange={props.handleNameChange} />\n            number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n            <button type=\"submit\" onClick={props.addPerson}>add</button>       \n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\n// Filter shown contacts\nconst Filter = (props) => {\n    return (\n        <form>\n            filter shown with <input value={props.newFilter} onChange={props.handleFilterChange} />\n        </form>\n    )\n}\n\nexport default Filter","import React from 'react'\n\n// Prints person's info\nconst Person = (props) => {\n    return (\n        <div>\n            <span>\n                {props.person.name}\n                {props.person.number}\n                <button onClick={props.handlePersonDelete}>Delete</button>\n            </span>\n        </div>\n    )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\n// Print list of contacts with filtering possible\nconst Persons = (props) => {\n    return (\n        <div>\n            {props.personsToShow.map(person =>\n                <Person key={person.id} person={person} handlePersonDelete={() => props.handlePersonDelete(person.id)} />\n            )}\n        </div>\n)\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    \n    return (\n        <div className='error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport './index.css'\nimport services from './services/services'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n    const [ persons, setPersons ] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ newFilter, setNewFilter ] = useState('')\n    const [ showAll, setShowAll ] = useState()\n    const [ errorMessage, setErrorMessage ] = useState('Here comes error!')\n    \n    // Get data from db.json with axios\n    useEffect(() => {\n        services\n            .getAll()\n            .then(initialData => {\n                setPersons(initialData)\n                setErrorMessage(\n                    `Loaded information from server successfully.`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n            })\n            .catch(() => {\n                setErrorMessage(\n                    `Could not load data from server.`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n            })\n    }, [])\n    \n    // Changelistener for name\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n    \n    // Changelistener for phonenumber\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n        \n    }\n    \n    // Changelistener for filter value\n    const handleFilterChange = (event) => {\n        setNewFilter(event.target.value)\n    }\n    \n    const handlePersonDelete = id => {\n        const person = persons.find(p => p.id === id)\n        const result = window.confirm(`Delete ${person.name}`)\n        if (result === true) {\n                services\n                    .deletePerson(id)\n                    .then(() => {\n                        setPersons(persons.filter(p => p.id !== id))\n                        setErrorMessage(\n                            `Deleted information successfully.`\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                    })\n                    .catch(() => {\n                        setErrorMessage(\n                            `Person '${person}' was already removed from server`\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                    })\n        }\n    }\n    \n    const personsToShow = showAll\n        ? persons\n        : persons.filter(person => person.name.toLowerCase().includes(newFilter))\n    \n    // Add person to phonebook\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personObject = {\n            name: newName,\n            number: newNumber,\n            id: persons.length + 1\n        }\n        \n        // Check if phonebook already contains same person\n        // and add new person if not\n        function containsObject(obj, list) {\n            return list.some(elem => elem.name === obj.name)\n        }\n        if (containsObject(personObject, persons) === false) {\n            services\n                .create(personObject)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                })\n                .catch(() => {\n                    setErrorMessage(\n                        `Could not update server.`\n                    )\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 5000)\n                })\n        } else if (containsObject(personObject, persons) === true) {\n            const changeNumber = window.confirm(`${personObject.name} is already added. Replace number?`)\n            if (changeNumber === true) {\n                const change = persons.find(p => p.name === personObject.name)\n                services\n                    .update(change.id, personObject)\n                    .then(resData => {\n                        setPersons(persons.map(person => person.id !== change.id ? person : resData ))\n                        setErrorMessage(\n                            `Updated information successfully.`\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                    })\n                    .catch(() => {\n                        setErrorMessage(\n                            `Update was not successfull.`\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                    })\n            }\n        }\n        \n        setNewName('')\n        setNewNumber('')\n    }\n    \n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={errorMessage} />\n            <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n            <PersonForm newName={newName} newNumber={newNumber} \n                handleNameChange={handleNameChange} handleNumberChange={handleNumberChange}\n                addPerson={addPerson} />\n            <h2>Numbers</h2>\n            <Persons personsToShow={personsToShow} handlePersonDelete={handlePersonDelete} />\n        </div>\n    )\n    \n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}